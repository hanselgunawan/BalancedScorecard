using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.SqlClient;
using System.Text;
using System.Configuration;

namespace Balanced_Scorecard
{
    public partial class set_review_month : System.Web.UI.Page
    {
        string str_connect = ConfigurationManager.ConnectionStrings["MyConnection"].ConnectionString;
        protected void Page_Load(object sender, EventArgs e)
        {
            StringBuilder HtmlPeriodTable = new StringBuilder();
            StringBuilder Pagination = new StringBuilder();//untuk Pagination
            if (!IsPostBack)
            {
                if (Session["user_name"] == null)
                {
                    Response.Redirect("~/index.aspx");
                }
                ((Label)Master.FindControl("LabelUsername")).Text = Session["user_name"].ToString();
                var paging = Request.QueryString["page"];//untuk pagination
                int page = 0, loop_quarterly = 0, loop_semesterly = 0;
                decimal no_header = 0;//inisialisasi
                decimal data_per_page = 10, max_select_data = 0, max_page = 0;//untuk pagination

                using (SqlConnection conn = new SqlConnection(str_connect))
                {
                    conn.Open();
                    if (paging == null)//untuk pertama kali Load Page
                    {
                        page = 1;
                        no_header = (1 * data_per_page) - (data_per_page - 1);//untuk no. header kolom 1 Table jika data yang ditampilkan per halaman = 5
                    }
                    else
                    {
                        page = int.Parse(paging.ToString());
                        no_header = (page * data_per_page) - (data_per_page - 1);
                    }

                    string get_max_data = "SELECT COUNT(Review_ID) FROM ScorecardReview";
                    string select_all_review = "SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY Review_Name, month_num ASC) AS rowNum, "
                                             + "* FROM ScorecardReview)sub WHERE rowNum>=((" + page + "-1)*" + data_per_page + ")+1 "
                                             + "AND rowNum<=" + data_per_page + "*" + page + "";
                    SqlCommand sql_select_all_review = new SqlCommand(select_all_review, conn);
                    SqlCommand sql_get_max_data = new SqlCommand(get_max_data, conn);
                    max_select_data = (int)sql_get_max_data.ExecuteScalar();//untuk mengetahui banyaknya page pada pagination
                    max_page = Math.Ceiling(max_select_data / data_per_page);//mendapatkan nilai banyaknya jumlah page
                    using (SqlDataReader ReviewReader = sql_select_all_review.ExecuteReader())
                    {
                        if (ReviewReader.HasRows)
                        {
                            HtmlPeriodTable.Append("<tr>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>No.</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Review Type</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Review Month</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Reviewable</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Review Status</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Action</th>");
                            HtmlPeriodTable.Append("</tr>");
                            while (ReviewReader.Read())
                            {
                                HtmlPeriodTable.Append("<tr align='center'>");
                                HtmlPeriodTable.Append("<td class='td-align'>" + no_header + "</td>");
                                if (ReviewReader["Review_Name"].ToString() == "Quarterly" && loop_quarterly==0)
                                {
                                    HtmlPeriodTable.Append("<td class='td-align' rowspan='4'>" + ReviewReader["Review_Name"] + "</td>");
                                    loop_quarterly=1;
                                }
                                else if (ReviewReader["Review_Name"].ToString() == "Semesterly" && loop_semesterly == 0)
                                {
                                    HtmlPeriodTable.Append("<td class='td-align' rowspan='2'>" + ReviewReader["Review_Name"] + "</td>");
                                    loop_semesterly = 1;
                                }
                                else if (ReviewReader["Review_Name"].ToString() == "Yearly")
                                {
                                    HtmlPeriodTable.Append("<td class='td-align'>" + ReviewReader["Review_Name"] + "</td>");
                                }
                                HtmlPeriodTable.Append("<td class='td-align'>" + ReviewReader["Review_Month"] + "</td>");
                                HtmlPeriodTable.Append("<td class='td-align'>Reviewable " + ReviewReader["reviewable_month"] + " month(s) before " + ReviewReader["Review_Month"] + "</td>");

                                if (ReviewReader["Review_Status"].ToString() == "Active")
                                {
                                    HtmlPeriodTable.Append("<td class='td-align active-period'>" + ReviewReader["Review_Status"] + "</td>");
                                }
                                else
                                {
                                    HtmlPeriodTable.Append("<td class='td-align inactive-period'>" + ReviewReader["Review_Status"] + "</td>");
                                }

                                HtmlPeriodTable.Append("<td class='td-align'><a href='edit_review.aspx?page=" + page + "&review_id=" + ReviewReader["Review_ID"] + "' class='btn btn-default'>Edit</a></td>");
                                HtmlPeriodTable.Append("</tr>");
                                no_header++;
                            }//end of While
                        }//end of if(HasRows)
                        else//jika tidak ada data period sama sekali
                        {
                            HtmlPeriodTable.Append("<tr align='center'>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>There is no period to display</th>");
                            HtmlPeriodTable.Append("</tr>");
                        }
                    }//end of SqlDataReader
                    conn.Close();
                }//end of SqlConnection
                PlaceHolderPeriod.Controls.Add(new Literal { Text = HtmlPeriodTable.ToString() });//menampilkan table period

                //Code untuk Pagination

                if (max_page > 1)
                {
                    Pagination.Append("<ul id='my-pagination' class='pagination'></ul>");

                    //Pagination JQuery
                    Pagination.Append("<script>");
                    Pagination.Append("$('#my-pagination').twbsPagination({");
                    Pagination.Append("totalPages: " + max_page + ",");
                    Pagination.Append("visiblePages: 7,");
                    Pagination.Append("href: '?page={{number}}'");
                    Pagination.Append("});");
                    Pagination.Append("</script>");
                    PlaceHolderPaging.Controls.Add(new Literal { Text = Pagination.ToString() });//untuk Pagination
                }

            }//end of if(!IsPostBack)
        }
    }
}