using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Configuration;
using System.IO;
using System.Web.UI.HtmlControls;

namespace Balanced_Scorecard
{
    public partial class set_period : System.Web.UI.Page
    {
        string str_connect = ConfigurationManager.ConnectionStrings["MyConnection"].ConnectionString;
        StringBuilder HtmlPeriodTable = new StringBuilder();
        StringBuilder Pagination = new StringBuilder();//untuk Pagination
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (Session["user_name"] == null)
                {
                    Response.Redirect("~/index.aspx");
                }
                ((Label)Master.FindControl("LabelUsername")).Text = Session["user_name"].ToString();
                var paging = Request.QueryString["page"];//untuk pagination
                int page = 0;
                decimal no_header = 0;//inisialisasi
                decimal data_per_page = 5, max_select_data = 0, max_page = 0;//untuk pagination

                //akses a tag di Master Page
                /*HtmlAnchor set_period_link = (HtmlAnchor)(this.Master).FindControl("hrefSetPeriod");
                HtmlAnchor financial_grouping_link = (HtmlAnchor)(this.Master).FindControl("hrefLinkFinancialGroup");
                HtmlAnchor financial_measure_link = (HtmlAnchor)(this.Master).FindControl("hrefFinancialMeasure");
                HtmlAnchor individual_scorecard_link = (HtmlAnchor)(this.Master).FindControl("hrefIndividualScorecard");
                HtmlAnchor review_month = (HtmlAnchor)(this.Master).FindControl("hrefSetReviewMonth");
                HtmlAnchor scorecard_user_link = (HtmlAnchor)(this.Master).FindControl("hrefScorecardUser");
                HtmlAnchor logo_link = (HtmlAnchor)(this.Master).FindControl("hrefLogo");
                HtmlAnchor change_password_link = (HtmlAnchor)(this.Master).FindControl("hrefChangePassword");
                HtmlAnchor logout_link = (HtmlAnchor)(this.Master).FindControl("hrefLogOut");
                HtmlAnchor user_access_rights = (HtmlAnchor)(this.Master).FindControl("hrefUserAccessRights");
                HtmlAnchor dashboard = (HtmlAnchor)(this.Master).FindControl("hrefDashboard");
                HtmlAnchor hrefCRKpiAnchor = (HtmlAnchor)(this.Master).FindControl("hrefCRKpi");
                HtmlAnchor hrefCRSpecificObjectiveAnchor = (HtmlAnchor)(this.Master).FindControl("hrefCRSpecificObjective");
                HtmlAnchor hrefApproveKPIAnchor = (HtmlAnchor)(this.Master).FindControl("hrefApproveKPI");
                HtmlAnchor hrefApproveSOAnchor = (HtmlAnchor)(this.Master).FindControl("hrefApproveSO");
                HtmlAnchor hrefKPIHistoryAnchor = (HtmlAnchor)(this.Master).FindControl("hrefKPIHistory");
                HtmlAnchor hrefSOHistoryAnchor = (HtmlAnchor)(this.Master).FindControl("hrefSOHistory");*/

                using (SqlConnection conn = new SqlConnection(str_connect))
                {
                    conn.Open();
                    if (paging == null)//untuk pertama kali Load Page
                    {
                        page = 1;
                        no_header = (1 * data_per_page) - (data_per_page - 1);//untuk no. header kolom 1 Table jika data yang ditampilkan per halaman = 5
                    }
                    else
                    {
                        page = int.Parse(paging.ToString());
                        no_header = (page * data_per_page) - (data_per_page - 1);
                    }

                    //Active Warning Message
                    string search_active_period = "SELECT Period_Status FROM BSC_Period WHERE Period_Status='Active'";
                    SqlCommand sql_search_active = new SqlCommand(search_active_period, conn);
                    using (SqlDataReader ActiveReader = sql_search_active.ExecuteReader())
                    {
                        if (!ActiveReader.HasRows)
                        {
                            WarningActiveMessage.Attributes.Add("style", "margin-bottom:-15px; margin-top:20px; visibility:visible; color:red; font-size:16px");
                            /*set_period_link.Attributes.Add("href","#");
                            financial_grouping_link.Attributes.Add("href","#");
                            financial_measure_link.Attributes.Add("href","#");
                            individual_scorecard_link.Attributes.Add("href", "#");
                            review_month.Attributes.Add("href", "#");
                            scorecard_user_link.Attributes.Add("href", "#");
                            logo_link.Attributes.Add("href", "#");
                            change_password_link.Attributes.Add("href", "#");
                            logout_link.Attributes.Add("href","#");
                            user_access_rights.Attributes.Add("href","#");
                            hrefCRKpiAnchor.Attributes.Add("href", "#");
                            hrefCRSpecificObjectiveAnchor.Attributes.Add("href", "#");
                            hrefApproveKPIAnchor.Attributes.Add("href", "#");
                            hrefApproveSOAnchor.Attributes.Add("href", "#");
                            hrefKPIHistoryAnchor.Attributes.Add("href", "#");
                            hrefSOHistoryAnchor.Attributes.Add("href", "#");
                            dashboard.Attributes.Add("href", "#");

                            set_period_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            financial_grouping_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            financial_measure_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            individual_scorecard_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            review_month.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            scorecard_user_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            logo_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            change_password_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            logout_link.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            user_access_rights.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            dashboard.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefCRKpiAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefCRSpecificObjectiveAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefApproveKPIAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefApproveSOAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefKPIHistoryAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");
                            hrefSOHistoryAnchor.Attributes.Add("onclick", "alert('Please Activate A Period');");*/
                        }
                        else
                        {
                            WarningActiveMessage.Attributes.Add("style", "margin-bottom:0px; margin-top:-20px; visibility:hidden");
                            /*set_period_link.Attributes.Add("href", "set_period.aspx");
                            financial_grouping_link.Attributes.Add("href", "link_financial_group.aspx");
                            financial_measure_link.Attributes.Add("href", "financial_scorecard.aspx");
                            individual_scorecard_link.Attributes.Add("href", "individual_scorecard.aspx");
                            review_month.Attributes.Add("href", "set_review_month.aspx");
                            scorecard_user_link.Attributes.Add("href", "scorecard_user.aspx");
                            logo_link.Attributes.Add("href", "financial_scorecard.aspx");
                            change_password_link.Attributes.Add("href", "change_password.aspx");
                            logout_link.Attributes.Add("href", "logout.aspx");
                            user_access_rights.Attributes.Add("href", "user_access_rights.aspx");
                            dashboard.Attributes.Add("href", "dashboard.aspx");
                            hrefCRKpiAnchor.Attributes.Add("href", "request_kpi.aspx");
                            hrefCRSpecificObjectiveAnchor.Attributes.Add("href", "request_so.aspx");
                            hrefApproveKPIAnchor.Attributes.Add("href", "approval.aspx");
                            hrefApproveSOAnchor.Attributes.Add("href", "approval_specific_objective.aspx");
                            hrefKPIHistoryAnchor.Attributes.Add("href", "request_change_kpi_history.aspx");
                            hrefSOHistoryAnchor.Attributes.Add("href", "request_change_specific_objective_history.aspx");
                            
                            set_period_link.Attributes.Remove("onclick");
                            financial_grouping_link.Attributes.Remove("onclick");
                            financial_measure_link.Attributes.Remove("onclick");
                            individual_scorecard_link.Attributes.Remove("onclick");
                            review_month.Attributes.Remove("onclick");
                            scorecard_user_link.Attributes.Remove("onclick");
                            logo_link.Attributes.Remove("onclick");
                            change_password_link.Attributes.Remove("onclick");
                            logout_link.Attributes.Remove("onclick");
                            user_access_rights.Attributes.Remove("onclick");
                            dashboard.Attributes.Remove("onclick");
                            hrefCRKpiAnchor.Attributes.Remove("onclick");
                            hrefCRSpecificObjectiveAnchor.Attributes.Remove("onclick");
                            hrefApproveKPIAnchor.Attributes.Remove("onclick");
                            hrefApproveSOAnchor.Attributes.Remove("onclick");
                            hrefKPIHistoryAnchor.Attributes.Remove("onclick");
                            hrefSOHistoryAnchor.Attributes.Remove("onclick");*/
                        }
                    }

                    //link untuk add new BSC Period
                    AddNewBSCPeriod.Attributes.Add("href","add_new_period.aspx?page="+page+"");

                    string get_max_data = "SELECT COUNT(Period_ID) FROM BSC_Period";
                    string select_all_period = "SELECT * FROM (SELECT ROW_NUMBER() OVER(ORDER BY Start_Period ASC) "
                                             + "AS rowNum, * FROM BSC_Period)sub WHERE rowNum>=((" + page + "-1)*" + data_per_page + ")+1 AND "
                                             + "rowNum<=" + data_per_page + "*" + page + "";
                    SqlCommand sql_select_all_period = new SqlCommand(select_all_period, conn);
                    SqlCommand sql_get_max_data = new SqlCommand(get_max_data, conn);
                    max_select_data = (int)sql_get_max_data.ExecuteScalar();//untuk mengetahui banyaknya page pada pagination
                    max_page = Math.Ceiling(max_select_data / data_per_page);//mendapatkan nilai banyaknya jumlah page
                    using (SqlDataReader PeriodReader = sql_select_all_period.ExecuteReader())
                    {
                        if (PeriodReader.HasRows)
                        {
                            HtmlPeriodTable.Append("<tr>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Period No.</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Start Date</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>End Date</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Description</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Status</th>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>Action</th>");
                            HtmlPeriodTable.Append("</tr>");
                            while (PeriodReader.Read())
                            {
                                string start_date_formatted, end_date_formatted;//agar Time-nya tidak ditampilkan
                                DateTime start_date = Convert.ToDateTime(PeriodReader["Start_Period"]);
                                DateTime end_date = Convert.ToDateTime(PeriodReader["End_Period"]);
                                start_date_formatted = start_date.ToString("MMM yyyy");
                                end_date_formatted = end_date.ToString("MMM yyyy");

                                HtmlPeriodTable.Append("<tr align='center'>");
                                HtmlPeriodTable.Append("<td class='td-align'>" + no_header + "</td>");
                                HtmlPeriodTable.Append("<td class='td-align'>" + start_date_formatted + "</td>");
                                HtmlPeriodTable.Append("<td class='td-align'>" + end_date_formatted + "</td>");

                                if (PeriodReader["Description"].ToString() == "")//jika tidak ada deskripsi yang diisi
                                {
                                    HtmlPeriodTable.Append("<td class='td-align'>None</td>");
                                }
                                else
                                {
                                    HtmlPeriodTable.Append("<td class='td-align'>" + PeriodReader["Description"] + "</td>");
                                }

                                if (PeriodReader["Period_Status"].ToString() == "Active")//jika status=Active, background-color menjadi hijau, jika status=Inactive, background-color menjadi merah
                                {
                                    HtmlPeriodTable.Append("<td class='td-align active-period'>" + PeriodReader["Period_Status"] + "</td>");
                                }
                                else
                                {
                                    HtmlPeriodTable.Append("<td class='td-align inactive-period'>" + PeriodReader["Period_Status"] + "</td>");
                                }

                                HtmlPeriodTable.Append("<td class='td-align'><a href='edit_period.aspx?page="+page+"&period_id=" + PeriodReader["Period_ID"] + "' class='btn btn-default'>Edit</a></td>");
                                HtmlPeriodTable.Append("</tr>");
                                no_header++;
                            }//end of While
                        }//end of if(HasRows)
                        else//jika tidak ada data period sama sekali
                        {
                            HtmlPeriodTable.Append("<tr align='center'>");
                            HtmlPeriodTable.Append("<th class='centering-th-period'>There is no period to display</th>");
                            HtmlPeriodTable.Append("</tr>");
                        }
                    }//end of SqlDataReader
                    conn.Close();
                }//end of SqlConnection
                PlaceHolderPeriod.Controls.Add(new Literal {Text = HtmlPeriodTable.ToString() });//menampilkan table period

                //Code untuk Pagination
                Pagination.Append("<ul id='my-pagination' class='pagination'></ul>");

                //Pagination JQuery
                Pagination.Append("<script>");
                Pagination.Append("$('#my-pagination').twbsPagination({");
                Pagination.Append("totalPages: " + max_page + ",");
                Pagination.Append("visiblePages: 7,");
                Pagination.Append("href: '?page={{number}}'");
                Pagination.Append("});");
                Pagination.Append("</script>");
                PlaceHolderPaging.Controls.Add(new Literal { Text = Pagination.ToString() });//untuk Pagination

            }//end of if(!IsPostBack)
        }//end of Page_Load

        /*protected void OnClickExport(object sender, EventArgs e)
        {
            string select_all_period = "SELECT * FROM BSC_Period";
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.ClearContent();
            HttpContext.Current.Response.ClearHeaders();
            HttpContext.Current.Response.Buffer = true;
            HttpContext.Current.Response.ContentType = "application/ms-excel";
            HttpContext.Current.Response.Write(@"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">");
            HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment;filename=\"Balanced Scorecard Period ( "+DateTime.Today.ToString("MMM,dd - yyyy")+" ).xls\"");

            HttpContext.Current.Response.Charset = "utf-8";
            HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.GetEncoding("windows-1250");
            HttpContext.Current.Response.Write("<BR><BR><BR>");
            //sets the table border, cell spacing, border color, font of the text, background, foreground, font height
            HttpContext.Current.Response.Write("<Table border='1' bgColor='#ffffff' " +
              "borderColor='#000000' cellSpacing='0' cellPadding='0' " +
              "style='font-size:12.0pt; font-family:Times New Roman; background:white;'>");

            HttpContext.Current.Response.Write("<tr>");
            HttpContext.Current.Response.Write("<td colspan='5' align='left' style='background-color:yellow; font-size:18pt'><b>Balanced Scorecard Period</b></td>");
            HttpContext.Current.Response.Write("</tr>");
            HttpContext.Current.Response.Write("<tr>");
            HttpContext.Current.Response.Write("<td colspan='5' align='left' style='background-color:yellow; font-size:14pt'>Print Date: " + DateTime.Today.ToString("MMM,dd - yyyy") + "</td>");
            HttpContext.Current.Response.Write("</tr>");

            HttpContext.Current.Response.Write("<tr align='center' style='font-size:12pt'>");
            HttpContext.Current.Response.Write("<th>No.</th>");
            HttpContext.Current.Response.Write("<th>Start Date</th>");
            HttpContext.Current.Response.Write("<th>End Date</th>");
            HttpContext.Current.Response.Write("<th>Description</th>");
            HttpContext.Current.Response.Write("<th>Status</th>");
            HttpContext.Current.Response.Write("</tr>");

            using (SqlConnection conn = new SqlConnection(str_connect))
            {
                SqlCommand sql_select_all_period = new SqlCommand(select_all_period,conn);
                int no_kolom = 1;
                conn.Open();
                using (SqlDataReader PeriodReader = sql_select_all_period.ExecuteReader())
                {
                    if (PeriodReader.HasRows)
                    {
                        while (PeriodReader.Read())
                        {
                            string start_date_formatted, end_date_formatted;//agar Time-nya tidak ditampilkan
                            DateTime start_date = Convert.ToDateTime(PeriodReader["Start_Period"]);
                            DateTime end_date = Convert.ToDateTime(PeriodReader["End_Period"]);
                            start_date_formatted = start_date.ToString("MMM,dd-yyyy");
                            end_date_formatted = end_date.ToString("MMM,dd-yyyy");

                            HttpContext.Current.Response.Write("<tr align='center' style='font-size:12pt'>");
                            HttpContext.Current.Response.Write("<td>" + no_kolom + "</td>");
                            HttpContext.Current.Response.Write("<td>" + start_date_formatted + "</td>");
                            HttpContext.Current.Response.Write("<td>" + end_date_formatted + "</td>");
                            HttpContext.Current.Response.Write("<td>" + PeriodReader["Description"].ToString() + "</td>");

                            if (PeriodReader["Period_Status"].ToString() == "Active")
                            {
                                HttpContext.Current.Response.Write("<td style='background-color:#66ff99'>" + PeriodReader["Period_Status"].ToString() + "</td>");
                            }
                            else
                            {
                                HttpContext.Current.Response.Write("<td>" + PeriodReader["Period_Status"].ToString() + "</td>");
                            }
                            HttpContext.Current.Response.Write("</tr>");
                            no_kolom++;
                        }
                    }
                    else
                    {
                        HttpContext.Current.Response.Write("<tr colspan='5'>");
                        HttpContext.Current.Response.Write("<td align='center' style='font-size:12pt'><b>Period Not Found</b></td>");
                        HttpContext.Current.Response.Write("</tr>");
                    }
                }
                conn.Close();
            }
            
            HttpContext.Current.Response.Write("</Table>");
            HttpContext.Current.Response.Flush();
            HttpContext.Current.Response.End();
        }*/
    }
}