using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Configuration;
using System.Net.Mail;

namespace Balanced_Scorecard
{
    public partial class approve_so : System.Web.UI.Page
    {
        string str_connect = ConfigurationManager.ConnectionStrings["MyConnection"].ConnectionString;
        protected void Page_Load(object sender, EventArgs e)
        {
            var page = Request.QueryString["page"];
            var request_id = Request.QueryString["request_id"];
            var period_id = Request.QueryString["period_id"];
            string user_update, date_update;
            if (Session["user_name"] == null)
            {
                Response.Redirect("~/index.aspx");
            }
            ((Label)Master.FindControl("LabelUsername")).Text = Session["user_name"].ToString();

            user_update = "hanselgunawan";
            date_update = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");

            string individual_header_id;
            int individual_detail_id = 0;
            string string_update_old_so = "";
            string string_get_new_so = "SELECT * FROM IndividualDetail_RequestChange WHERE IndividualDetailRequest_ID=" + request_id + "";
            string string_update_status_request = "UPDATE IndividualDetail_RequestChange SET Approval_Status='approved', "
                                                + "user_update='" + user_update + "', date_update='" + date_update + "' WHERE IndividualDetailRequest_ID=" + request_id + "";
            string string_get_individual_header_id = "SELECT IndividualHeader_ID FROM IndividualDetailHistory "
                                                   + "WHERE IndividualDetailRequest_ID=" + request_id + "";
            string string_get_individual_detail_id = "SELECT IndividualDetail_ID FROM IndividualDetailHistory "
                                                   + "WHERE IndividualDetailRequest_ID=" + request_id + "";
            string insert_specific_objective = "INSERT INTO IndividualMeasures_Detail VALUES(@header_id, @title, @target, @result, "
                                             + "@measure, ROUND(@rating,2), @user_create, @user_update, @formula, @data_status, "
                                             + "@date_create, @date_update)";

            using (SqlConnection conn = new SqlConnection(str_connect))
            {
                conn.Open();
                SqlCommand sql_get_new_so = new SqlCommand(string_get_new_so, conn);
                SqlCommand sql_update_request_status = new SqlCommand(string_update_status_request, conn);
                SqlCommand sql_get_individual_header_id = new SqlCommand(string_get_individual_header_id, conn);
                SqlCommand sql_insert_specific_objective = new SqlCommand(insert_specific_objective, conn);

                individual_header_id = sql_get_individual_header_id.ExecuteScalar().ToString();

                string string_update_header_rating_score = "exec SP_UpdateIndividualHeader " + individual_header_id + "";
                SqlCommand sql_update_header_rating_score = new SqlCommand(string_update_header_rating_score, conn);

                using (SqlDataReader NewReader = sql_get_new_so.ExecuteReader())
                {
                    while (NewReader.Read())
                    {
                        if (NewReader["delete_flag"].ToString() == "0")
                        {
                            string_update_old_so = "UPDATE IndividualMeasures_Detail SET IndividualDetail_Title=@title, "
                                                 + "IndividualDetail_Target=@target, IndividualDetail_Result=@result, "
                                                 + "IndividualDetail_MeasureBy=@measure_by, IndividualDetail_Rating=@rating, "
                                                 + "user_update=@user_update, "
                                                 + "IndividualDetail_Formula=@formula, date_update=@date_update "
                                                 + "WHERE IndividualDetail_ID=@detail_id";
                            SqlCommand sql_get_individual_detail_id = new SqlCommand(string_get_individual_detail_id, conn);
                            individual_detail_id = (int)sql_get_individual_detail_id.ExecuteScalar();
                        }
                        else if (NewReader["delete_flag"].ToString() == "1")
                        {
                            string_update_old_so = "UPDATE IndividualMeasures_Detail SET IndividualDetail_Title=@title, "
                                                 + "IndividualDetail_Target=@target, IndividualDetail_Result=@result, "
                                                 + "IndividualDetail_MeasureBy=@measure_by, IndividualDetail_Rating=@rating, "
                                                 + "user_update=@user_update, "
                                                 + "IndividualDetail_Formula=@formula, date_update=@date_update, data_status='deleted' "
                                                 + "WHERE IndividualDetail_ID=@detail_id";
                            SqlCommand sql_get_individual_detail_id = new SqlCommand(string_get_individual_detail_id, conn);
                            individual_detail_id = (int)sql_get_individual_detail_id.ExecuteScalar();
                        }
                        else if (NewReader["delete_flag"].ToString() == "2")
                        {
                            string_update_old_so = "INSERT INTO IndividualMeasures_Detail VALUES(@header_id, @title, "
                                                 + "@target, @result, "
                                                 + "@measure_by, ROUND(@rating,2), @user_create, @user_update, "
                                                 + "@formula, @data_status, "
                                                 + "@date_create, @date_update)";
                        }

                        SqlCommand sql_update_old_so = new SqlCommand(string_update_old_so, conn);

                        if (NewReader["delete_flag"].ToString() != "2")
                        {
                            sql_update_old_so.Parameters.AddWithValue("@title", NewReader["IndividualDetail_Title"]);
                            sql_update_old_so.Parameters.AddWithValue("@target", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Target"].ToString()),2));
                            sql_update_old_so.Parameters.AddWithValue("@result", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Result"].ToString()), 2));
                            sql_update_old_so.Parameters.AddWithValue("@measure_by", NewReader["IndividualDetail_MeasureBy"]);
                            sql_update_old_so.Parameters.AddWithValue("@rating", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Rating"].ToString()), 2));
                            sql_update_old_so.Parameters.AddWithValue("@user_update", user_update);
                            sql_update_old_so.Parameters.AddWithValue("@formula", NewReader["IndividualDetail_Formula"]);
                            sql_update_old_so.Parameters.AddWithValue("@date_update", date_update);
                            sql_update_old_so.Parameters.AddWithValue("@detail_id", individual_detail_id);
                            sendMailApprove(NewReader["delete_flag"].ToString());
                            sql_update_old_so.ExecuteNonQuery();//Update Specific Objective yang di-request
                        }
                        else
                        {
                            string check_specific_obj = "SELECT IndividualDetail_Title FROM IndividualMeasures_Detail "
                                                      + "WHERE IndividualHeader_ID = " + individual_header_id + " AND "
                                                      + "IndividualDetail_Title = '" + NewReader["IndividualDetail_Title"].ToString() + "'";
                            SqlCommand sql_check_specific_obj = new SqlCommand(check_specific_obj, conn);

                            using (SqlDataReader SpecificObjReader = sql_check_specific_obj.ExecuteReader())
                            {
                                if (!SpecificObjReader.HasRows)
                                {
                            sql_update_old_so.Parameters.AddWithValue("@header_id", individual_header_id);
                            sql_update_old_so.Parameters.AddWithValue("@title", NewReader["IndividualDetail_Title"]);
                                    sql_update_old_so.Parameters.AddWithValue("@target", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Target"].ToString()), 2));
                                    sql_update_old_so.Parameters.AddWithValue("@result", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Result"].ToString()), 2));
                            sql_update_old_so.Parameters.AddWithValue("@measure_by", NewReader["IndividualDetail_MeasureBy"]);
                                    sql_update_old_so.Parameters.AddWithValue("@rating", Math.Round(Convert.ToDouble(NewReader["IndividualDetail_Rating"].ToString()), 2));
                            sql_update_old_so.Parameters.AddWithValue("@user_create", user_update);
                            sql_update_old_so.Parameters.AddWithValue("@user_update", user_update);
                            sql_update_old_so.Parameters.AddWithValue("@formula", NewReader["IndividualDetail_Formula"]);
                            sql_update_old_so.Parameters.AddWithValue("@data_status", "exist");
                            sql_update_old_so.Parameters.AddWithValue("@date_create", date_update);
                            sql_update_old_so.Parameters.AddWithValue("@date_update", date_update);
                        sendMailApprove(NewReader["delete_flag"].ToString());
                        sql_update_old_so.ExecuteNonQuery();//Update Specific Objective yang di-request
                    }
                            }
                        }
                    }
                    NewReader.Dispose();
                    NewReader.Close();
                }

                sql_update_header_rating_score.ExecuteNonQuery();//Update Individual Header Rating dan Score
                sql_update_request_status.ExecuteNonQuery();//Update status Request menjadi 'approved'
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "redirect", "alert('Request has been approved'); window.location='" + Request.ApplicationPath + "/approval_specific_objective.aspx?page=" + page + "&period_id=" + period_id + "';", true);
                conn.Close();
            }
        }

        public void sendMailApprove(string delete_flag)
        {
            var request_id = Request.QueryString["request_id"];
            var period_id = Request.QueryString["period_id"];
            string sender_email = "", sender_name = "";

            string get_sender_email = "SELECT empEmail FROM ScorecardUser WHERE EmpId='" + Session["user_nik"].ToString() + "'";
            string get_sender_name = "SELECT empName FROM ScorecardUser WHERE EmpId='" + Session["user_nik"].ToString() + "'";
            string string_get_user_info = "SELECT ScorecardUser.EmpId, empName, empOrg, empJobTitle, LOWER(empEmail) as Email, "
                                                + "empGrade, empJobLvlName, OrgAdtGroupName, Group_Name, FinancialHeader_StretchRating, IndividualHeader_KPI, empStatus "
                                                + "FROM [Balanced Scorecard].dbo.ScorecardUser "
                                                + "join IndividualDetail_RequestChange ON IndividualDetail_RequestChange.user_id = ScorecardUser.user_id "
                                                + "join IndividualDetailHistory ON IndividualDetailHistory.IndividualDetailRequest_ID = IndividualDetail_RequestChange.IndividualDetailRequest_ID "
                                                + "join [Human_Capital_demo].dbo.OrgAdtGroup on ScorecardUser.empOrgAdtGroupCode=OrgAdtGroup.OrgAdtCode "
                                                + "join ScorecardGroupLink (nolock) on ScorecardGroupLink.OrgAdtGroupCode = ScorecardUser.empOrgAdtGroupCode "
                                                + "join BSC_Period on ScorecardGroupLink.Period_ID = BSC_Period.Period_ID and BSC_period.Period_ID=" + period_id + " "
                                                + "join FinancialMeasures_Header ON FinancialMeasures_Header.FinancialHeader_Group = ScorecardGroupLink.Group_Name AND FinancialMeasures_Header.Period_ID=" + period_id + " "
                                                + "WHERE IndividualDetailHistory_ID=" + request_id + " AND IndividualDetailHistory.Period_ID=" + period_id + "";
            string string_get_current_specific_objective = "SELECT * FROM IndividualDetailHistory WHERE IndividualDetailRequest_ID=" + request_id + "";
            string string_get_new_specific_objective = "SELECT * FROM IndividualDetail_RequestChange WHERE IndividualDetailRequest_ID=" + request_id + "";

            using (SqlConnection conn = new SqlConnection(str_connect))
            {
                conn.Open();
                SqlCommand sql_get_user_info = new SqlCommand(string_get_user_info, conn);
                SqlCommand sql_get_current_specific_objective = new SqlCommand(string_get_current_specific_objective, conn);
                SqlCommand sql_get_new_specific_objective = new SqlCommand(string_get_new_specific_objective, conn);
                SqlCommand sql_get_sender_email = new SqlCommand(get_sender_email, conn);
                SqlCommand sql_get_sender_name = new SqlCommand(get_sender_name, conn);
                sender_email = sql_get_sender_email.ExecuteScalar().ToString();
                sender_name = sql_get_sender_name.ExecuteScalar().ToString();

                StringBuilder sb_subject = new StringBuilder();
                StringBuilder sb_body_introduction = new StringBuilder();
                StringBuilder sb_from_email = new StringBuilder();
                StringBuilder sb_current_detail = new StringBuilder();
                StringBuilder sb_new_detail = new StringBuilder();
                StringBuilder sb_conclusion = new StringBuilder();

                using (SqlDataReader UserReader = sql_get_user_info.ExecuteReader())
                {
                    while (UserReader.Read())
                    {
                        if (delete_flag == "0")
                        {
                            sb_from_email.Append(UserReader["Email"].ToString());
                            sb_subject.Append("Request for Change Specific Objective has been Approved");
                            sb_body_introduction.Append("Hello, <br/>"
                                    + "<b>NIK / <i>Barcode</i></b> : " + UserReader["EmpId"].ToString() + "<br/>"
                                    + "<b>Name</b> : " + UserReader["empName"].ToString() + "<br/>"
                                    + "<b>Group</b> : " + UserReader["Group_Name"].ToString() + " (Stretch Rating: " + UserReader["FinancialHeader_StretchRating"].ToString() + "%)<br/>"
                                    + "<b>Organization</b> : " + UserReader["empOrg"].ToString() + "<br/>"
                                    + "<b>Additional Group</b> : " + UserReader["OrgAdtGroupName"].ToString() + "<br/>"
                                    + "<b>Job Title</b> : " + UserReader["empJobTitle"].ToString() + "<br/>"
                                    + "<b>Grade</b> : " + UserReader["empGrade"].ToString() + "<br/><br/>"
                                    + "We would like to notify you that your request for change your <b>" + UserReader["IndividualHeader_KPI"].ToString() + "</b>'s Specific Objective "
                                    + "from:<br/><br/>");
                        }
                        else if (delete_flag == "1")
                        {
                            sb_from_email.Append(UserReader["Email"].ToString());
                            sb_subject.Append("Request for Delete Specific Objective has been Approved");
                            sb_body_introduction.Append("Hello, <br/>"
                                    + "<b>NIK / <i>Barcode</i></b> : " + UserReader["EmpId"].ToString() + "<br/>"
                                    + "<b>Name</b> : " + UserReader["empName"].ToString() + "<br/>"
                                    + "<b>Group</b> : " + UserReader["Group_Name"].ToString() + " (Stretch Rating: " + UserReader["FinancialHeader_StretchRating"].ToString() + "%)<br/>"
                                    + "<b>Organization</b> : " + UserReader["empOrg"].ToString() + "<br/>"
                                    + "<b>Additional Group</b> : " + UserReader["OrgAdtGroupName"].ToString() + "<br/>"
                                    + "<b>Job Title</b> : " + UserReader["empJobTitle"].ToString() + "<br/>"
                                    + "<b>Grade</b> : " + UserReader["empGrade"].ToString() + "<br/><br/>"
                                    + "We would like to notify you that your request for delete your following <b>" + UserReader["IndividualHeader_KPI"].ToString() + "</b>'s "
                                    + "Specific Objective:<br/><br/> ");
                        }
                        else if (delete_flag == "2")
                        {
                            sb_from_email.Append(UserReader["Email"].ToString());
                            sb_subject.Append("Request for Add New Specific Objective has been Approved");
                            sb_body_introduction.Append("Hello, <br/>"
                                    + "<b>NIK / <i>Barcode</i></b> : " + UserReader["EmpId"].ToString() + "<br/>"
                                    + "<b>Name</b> : " + UserReader["empName"].ToString() + "<br/>"
                                    + "<b>Group</b> : " + UserReader["Group_Name"].ToString() + " (Stretch Rating: " + UserReader["FinancialHeader_StretchRating"].ToString() + "%)<br/>"
                                    + "<b>Organization</b> : " + UserReader["empOrg"].ToString() + "<br/>"
                                    + "<b>Additional Group</b> : " + UserReader["OrgAdtGroupName"].ToString() + "<br/>"
                                    + "<b>Job Title</b> : " + UserReader["empJobTitle"].ToString() + "<br/>"
                                    + "<b>Grade</b> : " + UserReader["empGrade"].ToString() + "<br/><br/>"
                                    + "We would like to notify you that your request to add the following new Specific Objective to your <b>" + UserReader["IndividualHeader_KPI"].ToString() + "</b> KPI:"
                                    + "<br/><br/>");
                        }

                        sb_conclusion.Append("has been <b>APPROVED</b>.<br/><br/>Thank you for your coorperation. <br/><br/>Best Regards, <br/><b>" + sender_name + "</b>");
                    }
                    UserReader.Dispose();
                    UserReader.Close();
                }

                if (delete_flag == "0")
                {
                    using (SqlDataReader CurrentReader = sql_get_current_specific_objective.ExecuteReader())
                    {
                        while (CurrentReader.Read())
                        {
                            if (CurrentReader["IndividualDetail_MeasureBy"].ToString() == "Month")
                            {
                                string month_name_target, month_name_result;
                                month_name_target = ShowMonthName(int.Parse(CurrentReader["IndividualDetail_Target"].ToString()));
                                month_name_result = ShowMonthName(int.Parse(CurrentReader["IndividualDetail_Result"].ToString()));
                                sb_current_detail.Append("<table>"
                                                + "<tr>"
                                                + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                                + "</tr>"
                                                + "<tr>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Title"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px''>" + month_name_target + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + month_name_result + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Formula"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                                + "</tr></table><br/> to:");
                            }
                            else if (CurrentReader["IndividualDetail_MeasureBy"].ToString() == "Numbers")
                            {
                                sb_current_detail.Append("<table>"
                                                + "<tr>"
                                                + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                                + "</tr>"
                                                + "<tr>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Title"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px''>" + CurrentReader["IndividualDetail_Target"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Result"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Formula"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                                + "</tr></table><br/> to:");
                            }
                            else
                            {
                                sb_current_detail.Append("<table style='border:1px solid black; border-collapse:collapse'>"
                                                + "<tr>"
                                                + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                                + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                                + "</tr>"
                                                + "<tr>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Title"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Target"].ToString() + " " + CurrentReader["IndividualDetail_MeasureBy"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Result"].ToString() + " " + CurrentReader["IndividualDetail_MeasureBy"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Formula"].ToString() + "</td>"
                                                + "<td style='border:1px solid black; padding:8px'>" + CurrentReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                                + "</tr></table><br/> to:");
                            }

                        }
                        CurrentReader.Dispose();
                        CurrentReader.Close();
                    }
                }

                using (SqlDataReader NewReader = sql_get_new_specific_objective.ExecuteReader())
                {
                    while (NewReader.Read())
                    {
                        if (NewReader["IndividualDetail_MeasureBy"].ToString() == "Month")
                        {
                            string month_name_target, month_name_result;
                            month_name_target = ShowMonthName(int.Parse(NewReader["IndividualDetail_Target"].ToString()));
                            month_name_result = ShowMonthName(int.Parse(NewReader["IndividualDetail_Result"].ToString()));
                            sb_new_detail.Append("<table style='border:1px solid black; border-collapse:collapse'>"
                                            + "<tr>"
                                            + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                            + "</tr>"
                                            + "<tr>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Title"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + month_name_target + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + month_name_result + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Formula"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                            + "</tr></table>with <b>reason</b>: " + NewReader["IndividualDetailReason"].ToString() + "<br/><br/>");
                        }
                        else if (NewReader["IndividualDetail_MeasureBy"].ToString() == "Numbers")
                        {
                            sb_new_detail.Append("<table style='border:1px solid black; border-collapse:collapse'>"
                                            + "<tr>"
                                            + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                            + "</tr>"
                                            + "<tr>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Title"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Target"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Result"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Formula"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                            + "</tr></table>with <b>reason</b>: " + NewReader["IndividualDetailReason"].ToString() + "<br/><br/>");
                        }
                        else
                        {
                            sb_new_detail.Append("<table style='border:1px solid black; border-collapse:collapse'>"
                                            + "<tr>"
                                            + "<th style='border:1px solid black; padding:8px'>Spec. Objective</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Target</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Result</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Formula</th>"
                                            + "<th style='border:1px solid black; padding:8px'>Rating</th>"
                                            + "</tr>"
                                            + "<tr>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Title"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Target"].ToString() + " " + NewReader["IndividualDetail_MeasureBy"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Result"].ToString() + " " + NewReader["IndividualDetail_MeasureBy"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Formula"].ToString() + "</td>"
                                            + "<td style='border:1px solid black; padding:8px'>" + NewReader["IndividualDetail_Rating"].ToString() + "%</td>"
                                            + "</tr></table>with <b>reason</b>: " + NewReader["IndividualDetailReason"].ToString() + "<br/><br/>");
                        }
                    }
                    NewReader.Dispose();
                    NewReader.Close();
                }

                SmtpClient mailclient = new SmtpClient();  //Karena FILE_LOCATION terjadi perubahan setiap di-klik, maka
                using (MailMessage msg = new MailMessage())//harus pake USING untuk CLEAR semua Resource yang pernah dipake
                {
                    /******************** SEND Email TO Users **************************************/
                    msg.Subject = sb_subject.ToString();
                    msg.Body = sb_body_introduction.ToString() + sb_current_detail.ToString() + sb_new_detail.ToString() + sb_conclusion.ToString();
                    if (sender_email == "")
                    {
                        msg.From = new MailAddress("message@error.com");
                    }
                    else
                    {
                        msg.From = new MailAddress(sender_email);
                    }

                    if (sb_from_email.ToString() == "")
                    {
                        msg.To.Add("message@error.com");
                    }
                    else
                    {
                        msg.To.Add(sb_from_email.ToString());//<-- E-Mail bawahan
                    }
                    msg.IsBodyHtml = true;
                    mailclient.Host = System.Configuration.ConfigurationManager.AppSettings["SMTPServer"];
                    mailclient.Port = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMTPPort"]);
                    mailclient.Send(msg);
                }
                conn.Close();
            }
        }

        public string ShowMonthName(int result_value)
        {
            string month_name = "";
            switch (result_value)
            {
                case 0:
                    month_name = "-"; break;
                case 1:
                    month_name = "January"; break;
                case 2:
                    month_name = "February"; break;
                case 3:
                    month_name = "March"; break;
                case 4:
                    month_name = "April"; break;
                case 5:
                    month_name = "May"; break;
                case 6:
                    month_name = "June"; break;
                case 7:
                    month_name = "July"; break;
                case 8:
                    month_name = "August"; break;
                case 9:
                    month_name = "September"; break;
                case 10:
                    month_name = "October"; break;
                case 11:
                    month_name = "November"; break;
                case 12:
                    month_name = "December"; break;
            }
            return month_name;
        }
    }
}