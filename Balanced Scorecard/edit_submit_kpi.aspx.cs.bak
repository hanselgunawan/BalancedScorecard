using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Configuration;

namespace Balanced_Scorecard
{
    public partial class edit_submit_kpi : System.Web.UI.Page
    {
        string str_connect = ConfigurationManager.ConnectionStrings["MyConnection"].ConnectionString;
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (Session["user_name"] == null)
                {
                    Response.Redirect("~/index.aspx");
                }
                ((Label)Master.FindControl("LabelUsername")).Text = Session["user_name"].ToString();
                var period_id = Request.QueryString["period_id"];
                var header_id = Request.QueryString["header_id"];
                var page = Request.QueryString["page"];
                var prev_page = Request.QueryString["prev_page"];
                var emp_nik = Request.QueryString["emp_nik"];

                var nik = Request.QueryString["nik"];
                var org = Request.QueryString["organization"];
                var adt_org = Request.QueryString["adt_organization"];
                var bsc_group = Request.QueryString["bsc_group"];
                var name = Request.QueryString["name"];
                //string user_nik = (string)Session["user_nik"];

                int current_month, current_year;
                current_month = DateTime.Now.Month;
                current_year = DateTime.Now.Year;

                int start_date_bsc = 0, minus_one_bsc = 0, year_from_startdate = 0;

                SqlConnection period_conn = new SqlConnection(str_connect);
                period_conn.Open();
                string select_period = "SELECT * FROM BSC_Period WHERE Period_ID=" + period_id + "";
                SqlCommand sql_select_period_start_month = new SqlCommand(select_period, period_conn);
                using (SqlDataReader StartMonthReader = sql_select_period_start_month.ExecuteReader())
                {
                    while (StartMonthReader.Read())
                    {
                        DateTime start_date = Convert.ToDateTime(StartMonthReader["Start_Period"]);
                        start_date_bsc = int.Parse(start_date.ToString("MM"));
                        year_from_startdate = int.Parse(start_date.ToString("yyyy"));
                    }
                    StartMonthReader.Dispose();
                    StartMonthReader.Close();
                }
                period_conn.Close();

                if (start_date_bsc == 1)
                {
                    minus_one_bsc = 12;
                }
                else
                {
                    minus_one_bsc = start_date_bsc - 1;
                }

                //link breadcrumb
                hrefSubmitIndividual.Attributes.Add("a href", "view_submit_individual.aspx?page=" + page + "&period_id=" + period_id + "&emp_nik=" + emp_nik + "&prev_page=" + prev_page + "");
                hrefDashboard.Attributes.Add("a href", "dashboard.aspx");

                if (nik == null && org == null && adt_org == null && bsc_group == null && name == null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "");
                }
                else if (nik != null && org == null && adt_org == null && bsc_group == null && name == null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "&nik=" + nik + "");
                }
                else if (nik == null && org != null && adt_org == null && bsc_group == null && name == null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "&organization=" + org + "");
                }
                else if (nik == null && org == null && adt_org != null && bsc_group == null && name == null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "&adt_organization=" + adt_org + "");
                }
                else if (nik == null && org == null && adt_org == null && bsc_group != null && name == null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "&bsc_group=" + bsc_group + "");
                }
                else if (nik == null && org == null && adt_org == null && bsc_group == null && name != null)
                {
                    hrefSubmitUsers.Attributes.Add("href", "view_submit_users.aspx?page=" + prev_page + "&period_id=" + period_id + "&name=" + name + "");
                }   

                //ubah TextBoxTarget menjadi Input Type = "Number"
                TextBoxTarget.Attributes.Add("type", "number");
                TextBoxTarget.Attributes.Add("step", "0.01");
                TextBoxTarget.Attributes.Add("min", "0");
                TextBoxTarget.Text = "0";

                //ubah TextBoxResult menjadi Input Type = "Number"
                TextBoxResult.Attributes.Add("type", "number");
                TextBoxResult.Attributes.Add("step", "0.01");
                TextBoxResult.Attributes.Add("min", "0");
                TextBoxResult.Text = "0";

                //untuk item pada Drop Down Measurement
                DropDownListMeasurement.Items.Add("%");
                DropDownListMeasurement.Items.Add("Month");
                DropDownListMeasurement.Items.Add("Million");
                DropDownListMeasurement.Items.Add("Numbers");

                //untuk item pada DropDown Specific Objective
                DropDownListSpecific.Items.Add("Yes");
                DropDownListSpecific.Items.Add("No");

                //Add Item to DropDown Formula
                DropDownFormula.Items.Add("(Result/Target) x 100");
                DropDownFormula.Items.Add("100% - ((Result/Target)/Target)");

                //Disable Target, Measure By, Formula, Rating, dan Score
                TextBoxTarget.Attributes.Add("disabled", "true");
                DropDownListMeasurement.Enabled = false;
                DropDownFormula.Enabled = false;
                TextBoxScore.Attributes.Add("disabled", "true");
                TextBoxRating.Attributes.Add("disabled", "true");
                TextBoxKPI.Attributes.Add("disabled", "true");
                TextareaObjective.Attributes.Add("disabled", "true");
                TextBoxWeight.Attributes.Add("disabled", "true");

                using (SqlConnection conn = new SqlConnection(str_connect))
                {
                    conn.Open();
                    int submit_user_id;
                    string string_get_submit_user_id = "SELECT ScorecardUser.user_id FROM ScorecardUser JOIN IndividualMeasures_Header "
                                                     + "ON IndividualMeasures_Header.user_id = ScorecardUser.user_id "
                                              + "WHERE IndividualMeasures_Header.IndividualHeader_ID = " + header_id + "";
                    SqlCommand sql_get_submit_user_id = new SqlCommand(string_get_submit_user_id, conn);
                    submit_user_id = (int)sql_get_submit_user_id.ExecuteScalar();

                    string string_select_individual_stretch_review = "SELECT FinancialHeader_IndividualStretchRating, FinancialHeader_Review, ScorecardUser.EmpId, ScorecardUser.empName FROM ScorecardUser "
                                                                    + "join ScorecardGroupLink ON ScorecardGroupLink.OrgAdtGroupCode=ScorecardUser.empOrgAdtGroupCode AND ScorecardGroupLink.Period_ID=" + period_id + " "
                                                                    + "join FinancialMeasures_Header ON FinancialMeasures_Header.FinancialHeader_Group = ScorecardGroupLink.Group_Name "
                                                                    + "WHERE ScorecardUser.user_id=" + submit_user_id.ToString() + " AND FinancialMeasures_Header.Period_ID=" + period_id + "";
                    string string_select_period = "SELECT * FROM BSC_Period WHERE Period_ID=" + period_id + "";
                    string select_individual_header = "SELECT * FROM IndividualMeasures_Header WHERE IndividualHeader_ID=" + header_id + " AND data_status='exist'";
                    SqlCommand sql_select_individual_stretch_review = new SqlCommand(string_select_individual_stretch_review, conn);
                    SqlCommand sql_select_period = new SqlCommand(string_select_period, conn);
                    SqlCommand sql_select_individual_header = new SqlCommand(select_individual_header, conn);

                    using (SqlDataReader StretchReviewReader = sql_select_individual_stretch_review.ExecuteReader())
                    {
                        if (StretchReviewReader.HasRows)
                        {
                            while (StretchReviewReader.Read())
                            {
                                LabelBreadcrumb.Text = StretchReviewReader["empName"].ToString() + "(" + StretchReviewReader["EmpId"].ToString() + ")";
                                LabelTitle.Text = StretchReviewReader["empName"].ToString() + "(" + StretchReviewReader["EmpId"].ToString() + ")";
                                LabelStretch.InnerText = StretchReviewReader["FinancialHeader_IndividualStretchRating"].ToString() + "%";
                                LabelReview.InnerText = StretchReviewReader["FinancialHeader_Review"].ToString();
                                TextBoxRating.Attributes.Add("max", StretchReviewReader["FinancialHeader_IndividualStretchRating"].ToString());
                            }
                        }
                        else
                        {
                            LabelBreadcrumb.Text = "Unknown User";
                            LabelTitle.Text = "Unknown User";
                            LabelStretch.InnerText = "0%";
                            LabelReview.InnerText = "-";
                            TextBoxRating.Attributes.Add("max", "0");
                            SpanEditKPI.Attributes.Add("class", "btn btn-default disabled");
                        }
                    }

                    using (SqlDataReader oReader = sql_select_period.ExecuteReader())
                    {
                        if (oReader.HasRows)
                        {
                            while (oReader.Read())
                            {
                                string start_date_formatted, end_date_formatted;
                                DateTime start_date = Convert.ToDateTime(oReader["Start_Period"]);
                                DateTime end_date = Convert.ToDateTime(oReader["End_Period"]);
                                start_date_formatted = start_date.ToString("MMM,dd-yyyy");
                                end_date_formatted = end_date.ToString("MMM,dd-yyyy");
                                LabelStartPeriod.InnerText = start_date_formatted;
                                LabelEndPeriod.InnerText = end_date_formatted;
                            }
                            cancel_add_new_KPI.Attributes.Add("a href", "view_submit_individual.aspx?page=" + page + "&period_id=" + period_id + "&emp_nik="+emp_nik+"&prev_page="+prev_page+"");
                        }
                        else//jika periode tidak ditemukkan / disuntik langsung ke Database
                        {
                            LabelStartPeriod.InnerText = "No Period";
                            LabelEndPeriod.InnerText = "No Period";
                            SpanEditKPI.Attributes.Add("class", "btn btn-add-group btn-add-group-container add-button disabled");
                            cancel_add_new_KPI.Attributes.Add("a href", "view_submit_individual.aspx?page=1&period_id=1&emp_nik=" + emp_nik + "&prev_page=" + prev_page + "");
                        }
                    }

                    using (SqlDataReader IndividualHeaderReader = sql_select_individual_header.ExecuteReader())
                    {
                        if (IndividualHeaderReader.HasRows)
                        {
                            while (IndividualHeaderReader.Read())
                            {
                                if (float.Parse(IndividualHeaderReader["IndividualHeader_Target"].ToString()) == -1)
                                {
                                    DropDownListSpecific.Enabled = false;
                                    TextBoxKPI.Attributes.Add("disabled", "true");
                                    TextareaObjective.Attributes.Add("disabled", "true");
                                    TextBoxWeight.Attributes.Add("disabled", "true");
                                    DropDownListMeasurement.Items.Add("-");
                                    DropDownFormula.Items.Add("-");
                                    DropDownListSpecific.SelectedValue = "Yes";//default button "Use" jika targetnya = -1
                                    TextBoxTarget.Text = "0";
                                    TextBoxResult.Attributes.Add("disabled", "true");
                                    TextBoxResult.Text = IndividualHeaderReader["IndividualHeader_Result"].ToString();
                                    DropDownFormula.SelectedValue = "-";
                                    DropDownListMeasurement.SelectedValue = "-";
                                    TextBoxRating.Value = IndividualHeaderReader["IndividualHeader_Rating"].ToString();
                                    TextBoxScore.Value = IndividualHeaderReader["IndividualHeader_Score"].ToString();
                                    TextBoxKPI.Value = IndividualHeaderReader["IndividualHeader_KPI"].ToString();
                                    TextareaObjective.InnerText = IndividualHeaderReader["IndividualHeader_Objective"].ToString();
                                }
                                else
                                {
                                    DropDownListSpecific.Enabled = false;
                                    TextBoxKPI.Attributes.Add("disabled", "true");
                                    TextareaObjective.Attributes.Add("disabled", "true");
                                    TextBoxTarget.Attributes.Add("disabled", "true");
                                    TextBoxResult.Attributes.Remove("disabled");
                                    DropDownListMeasurement.Enabled = false;
                                    DropDownFormula.Enabled = false;
                                    TextBoxWeight.Attributes.Add("disabled", "true");

                                    DropDownListSpecific.SelectedValue = "No";
                                    TextBoxTarget.Text = IndividualHeaderReader["IndividualHeader_Target"].ToString();
                                    TextBoxResult.Text = IndividualHeaderReader["IndividualHeader_Result"].ToString();
                                    DropDownListMeasurement.SelectedValue = IndividualHeaderReader["IndividualHeader_MeasureBy"].ToString();
                                    DropDownFormula.SelectedValue = IndividualHeaderReader["IndividualHeader_Formula"].ToString();
                                    TextBoxRating.Value = IndividualHeaderReader["IndividualHeader_Rating"].ToString();
                                    TextBoxScore.Value = IndividualHeaderReader["IndividualHeader_Score"].ToString();

                                    if (IndividualHeaderReader["IndividualHeader_MeasureBy"].ToString() == "Month")
                                    {
                                        TextBoxTarget.Attributes.Add("max", "12");
                                        TextBoxTarget.Attributes.Add("step", "1");
                                        TextBoxResult.Attributes.Add("max", "12");
                                        TextBoxResult.Attributes.Add("step", "1");
                                        int target_value = int.Parse(TextBoxTarget.Text);
                                        string target_month_name;
                                        target_month_name = ShowMonthNameTarget(target_value);
                                        month_name_target.InnerText = target_month_name;
                                        //tampilakan Month Name
                                        month_name_target.Attributes.Add("style", "color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                                        if (IndividualHeaderReader["IndividualHeader_Result"].ToString() == "0")
                                        {
                                            month_name_result.Attributes.Add("style", "visibility:hidden; padding-bottom:0px; margin-top:0px");
                                        }
                                        else
                                        {
                                            int result_value = int.Parse(TextBoxResult.Text);
                                            string result_month_name;
                                            result_month_name = ShowMonthNameResult(result_value);
                                            month_name_result.InnerText = result_month_name;
                                            month_name_result.Attributes.Add("style", "color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                                        }
                                    }
                                    else
                                    {
                                        //tampilakan Month Name
                                        month_name_target.Attributes.Add("style", "visibility:hidden; padding-bottom:0px; margin-top:0px");
                                        month_name_result.Attributes.Add("style", "visibility:hidden; padding-bottom:0px; margin-top:0px");
                                    }
                                    TextBoxKPI.Value = IndividualHeaderReader["IndividualHeader_KPI"].ToString();
                                    TextareaObjective.InnerText = IndividualHeaderReader["IndividualHeader_Objective"].ToString();
                                    TextBoxWeight.Value = IndividualHeaderReader["IndividualHeader_Weight"].ToString();

                                }
                            }
                        }
                    }
                    conn.Close();
                }//end of SqlConnection
            }
        }

        protected void OnSelectMeasureBy(object sender, EventArgs e)
        {
            if (DropDownListMeasurement.SelectedValue == "Month")
            {
                int target_value = int.Parse(TextBoxTarget.Text);
                string month_name;
                month_name_target.Attributes.Add("style", "width:300px; color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                TextBoxTarget.Attributes.Add("max", "12");
                TextBoxTarget.Attributes.Add("min", "1");
                TextBoxTarget.Attributes.Add("step", "1");
                if (target_value > 12)
                {
                    TextBoxTarget.Text = "12";
                    month_name_target.InnerText = "December";
                }
                else if (target_value < 1)
                {
                    TextBoxTarget.Text = "1";
                    month_name_target.InnerText = "January";
                }
                else
                {
                    month_name = ShowMonthNameTarget(target_value);
                    month_name_target.InnerText = month_name;
                }
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "alertMessage", "alert('Maximum Target value for measure by month is 12 and minimum value is 1')", true);
            }
            else
            {
                month_name_target.Attributes.Add("style", "width:300px; visibility:hidden; padding-bottom:0px; margin-top:0px");
                TextBoxTarget.Attributes.Remove("max");
                TextBoxTarget.Attributes.Add("min", "0");
                TextBoxTarget.Attributes.Add("step", "0.01");
            }
        }

        protected void OnTargetChanged(object sender, EventArgs e)
        {
            if (DropDownListMeasurement.SelectedValue == "Month")
            {
                int target_value = int.Parse(TextBoxTarget.Text);
                string month_name;
                month_name_target.Attributes.Add("style", "width:300px; color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                if (target_value > 12)
                {
                    TextBoxTarget.Text = "12";
                    month_name_target.InnerText = "December";
                }
                else if (target_value < 1)
                {
                    TextBoxTarget.Text = "1";
                    month_name_target.InnerText = "January";
                }
                else
                {
                    month_name = ShowMonthNameTarget(target_value);
                    month_name_target.InnerText = month_name;
                }
            }
            else
            {
                month_name_target.Attributes.Add("style", "width:300px; visibility:hidden; padding-bottom:0px; margin-top:0px");
            }
        }

        protected void OnResultChanged(object sender, EventArgs e)
        {
            if (DropDownListMeasurement.SelectedValue == "Month")
            {
                int result_value = int.Parse(TextBoxResult.Text);
                string month_name;
                month_name_result.Attributes.Add("style", "width:300px; color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                if (result_value > 12)
                {
                    TextBoxResult.Text = "12";
                    month_name_result.InnerText = "December";
                }
                else
                {
                    month_name = ShowMonthNameResult(result_value);
                    if (month_name == "-")
                    {
                        month_name_result.Attributes.Add("style", "width:300px; color:black; visibility:hidden; padding-bottom:0px; margin-top:0px");
                    }
                    else
                    {
                        month_name_result.Attributes.Add("style", "width:300px; color:black; visibility:visible; padding-bottom:20px; margin-top:3px");
                        month_name_result.InnerText = month_name;
                    }
                }
            }
            else
            {
                month_name_result.Attributes.Add("style", "width:300px; visibility:hidden; padding-bottom:0px; margin-top:0px");
            }
        }

        protected void OnClickEditKPI(object sender, EventArgs e)
        {
            var page = Request.QueryString["page"];
            var period_id = Request.QueryString["period_id"];
            var emp_nik = Request.QueryString["emp_nik"];
            var prev_page = Request.QueryString["prev_page"];
            var header_id = Request.QueryString["header_id"];

            int user_id = 0;
            string select_user_id = "SELECT user_id FROM IndividualMeasures_Header WHERE IndividualHeader_ID=" + header_id + "";
            string select_KPI_name = "SELECT IndividualHeader_KPI FROM IndividualMeasures_Header "
                                   + "WHERE IndividualHeader_KPI='" + TextBoxKPI.Value + "' "
                                   + "AND IndividualHeader_ID<>" + header_id + " AND data_status='exist' "
                                   + "AND Period_ID=" + period_id + "";
            bool KPI_name_exist;
            float total_rating = 0, total_score, max_stretch;

            using (SqlConnection conn = new SqlConnection(str_connect))
            {
                conn.Open();
                SqlCommand sql_select_user_id = new SqlCommand(select_user_id, conn);
                user_id = (int)sql_select_user_id.ExecuteScalar();

                if (DropDownFormula.SelectedValue == "(Result/Target) x 100")
                {
                    if (float.Parse(TextBoxResult.Text) == 0 && float.Parse(TextBoxTarget.Text) == 0)
                    {
                        total_rating = 0;//error handling untuk hasil yang UNLIMITED
                    }
                    else
                    {
                        total_rating = (float.Parse(TextBoxResult.Text) / float.Parse(TextBoxTarget.Text)) * 100;
                    }
                }
                else if (DropDownFormula.SelectedValue == "100% - ((Result/Target)/Target)")
                {
                    total_rating = 100 - (((float.Parse(TextBoxResult.Text) / float.Parse(TextBoxTarget.Text)) / float.Parse(TextBoxTarget.Text)) * 100);
                }

                //mengambil nilai max stretch rating dari tabel Financial Header. ASUMSI NIK ==> 100
                string string_select_max_stretch = "SELECT FinancialHeader_IndividualStretchRating FROM ScorecardUser "
                                                  + "join ScorecardGroupLink ON ScorecardGroupLink.OrgAdtGroupCode=ScorecardUser.empOrgAdtGroupCode AND ScorecardGroupLink.Period_ID=" + period_id + " "
                                                  + "join FinancialMeasures_Header ON FinancialMeasures_Header.FinancialHeader_Group = ScorecardGroupLink.Group_Name "
                                                  + "WHERE ScorecardUser.EmpId='" + emp_nik + "' AND FinancialMeasures_Header.Period_ID=" + period_id + "";
                SqlCommand sql_select_max_stretch = new SqlCommand(string_select_max_stretch, conn);
                max_stretch = float.Parse(sql_select_max_stretch.ExecuteScalar().ToString());

                if (total_rating > max_stretch)//agar tidak melebihi stretch rating yang sudah ditentukan
                {
                    total_rating = max_stretch;
                }

                total_score = (total_rating * (float.Parse(TextBoxWeight.Value))) / 100;

                SqlCommand sql_select_KPI_name = new SqlCommand(select_KPI_name, conn);
                using (SqlDataReader KPIReader = sql_select_KPI_name.ExecuteReader())//mengecek apakah KPI sudah ada atau belum
                {
                    if (KPIReader.HasRows)
                    {
                        check_KPI_name_error_message.Attributes.Add("style", "visibility:visible; margin-bottom:0px !important; margin-top:5px !important; color:red; font-weight:bold");
                        KPI_name_exist = true;
                    }
                    else
                    {
                        KPI_name_exist = false;
                    }
                } //end of KPIReader

                if (KPI_name_exist == false)
                {
                    //KALAU SPEC OBJ = NO, UPDATE Header dan Hapus Anaknya!
                    if (DropDownListSpecific.SelectedValue == "No")
                    {
                        //ASUMSI --> NIK=100
                        string update_individual_header = "UPDATE IndividualMeasures_Header SET IndividualHeader_KPI=@header_KPI, "
                                                        + "IndividualHeader_Target=@target, IndividualHeader_Result=@result, "
                                                        + "IndividualHeader_Rating=ROUND(@rating,2), IndividualHeader_Weight=@weight, "
                                                        + "IndividualHeader_Score=ROUND(@score,2), user_update=@user_update, date_update=@date_update, "
                                                        + "IndividualHeader_Objective=@objective, Period_ID=@period_id, IndividualHeader_Formula=@formula, "
                                                        + "IndividualHeader_MeasureBy=@measure, data_status=@data_status, user_id=@user_id "
                                                        + "WHERE IndividualHeader_ID=" + header_id + "";
                        string user_update, date_update;
                        SqlCommand sql_update_individual_header = new SqlCommand(update_individual_header, conn);

                        user_update = Session["user_name"].ToString();
                        date_update = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");

                        sql_update_individual_header.Parameters.AddWithValue("@header_KPI", TextBoxKPI.Value);
                        sql_update_individual_header.Parameters.AddWithValue("@target", Math.Round(Convert.ToDouble(TextBoxTarget.Text),2));
                        sql_update_individual_header.Parameters.AddWithValue("@result", Math.Round(Convert.ToDouble(TextBoxResult.Text), 2));
                        sql_update_individual_header.Parameters.AddWithValue("@rating", total_rating);
                        sql_update_individual_header.Parameters.AddWithValue("@weight", Math.Round(Convert.ToDouble(TextBoxWeight.Value), 2));
                        sql_update_individual_header.Parameters.AddWithValue("@score", total_score);
                        sql_update_individual_header.Parameters.AddWithValue("@user_update", user_update);
                        sql_update_individual_header.Parameters.AddWithValue("@date_update", date_update);
                        sql_update_individual_header.Parameters.AddWithValue("@objective", TextareaObjective.InnerText);
                        sql_update_individual_header.Parameters.AddWithValue("@period_id", period_id);
                        sql_update_individual_header.Parameters.AddWithValue("@formula", DropDownFormula.SelectedValue);
                        sql_update_individual_header.Parameters.AddWithValue("@measure", DropDownListMeasurement.SelectedValue);
                        sql_update_individual_header.Parameters.AddWithValue("@data_status", "exist");
                        sql_update_individual_header.Parameters.AddWithValue("@user_id", emp_nik);
                        sql_update_individual_header.ExecuteNonQuery();

                        string check_individual_detail = "SELECT * FROM IndividualMeasures_Detail "
                                                       + "WHERE IndividualHeader_ID=" + header_id + " AND data_status='exist'";
                        SqlCommand sql_individual_detail = new SqlCommand(check_individual_detail, conn);
                        using (SqlDataReader DetailReader = sql_individual_detail.ExecuteReader())
                        {
                            if (DetailReader.HasRows)//cek apakah sudah ada Detail atau Belum. Jika sudah ada, DELETE Detail-nya
                            {
                                string delete_individual_detail = "UPDATE IndividualMeasures_Detail SET data_status='deleted' WHERE IndividualHeader_ID=" + header_id + "";
                                SqlCommand sql_delete_individual_detail = new SqlCommand(delete_individual_detail, conn);
                                sql_delete_individual_detail.ExecuteNonQuery();
                            }
                        }

                        ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "redirect", "alert('KPI Updated!'); window.location='" + "view_submit_individual.aspx?page=" + page + "&period_id=" + period_id + "&emp_nik=" + emp_nik + "&prev_page=" + prev_page + "';", true);
                    }
                    else if (DropDownListSpecific.SelectedValue == "Yes")//Jika ada Specific Objectives
                    {
                        float score;
                        string update_individual_header = "UPDATE IndividualMeasures_Header SET IndividualHeader_KPI=@header_KPI, "
                                                        + "IndividualHeader_Target=@target, IndividualHeader_Result=@result, IndividualHeader_Rating=@rating, "
                                                        + "IndividualHeader_Weight=@weight, IndividualHeader_Score=ROUND(@score,2), user_update=@user_update, "
                                                        + "date_update=@date_update, IndividualHeader_Objective=@objective, Period_ID=@period_id, "
                                                        + "IndividualHeader_Formula=@formula, IndividualHeader_MeasureBy=@measure, data_status=@data_status, "
                                                        + "user_id=@user_id WHERE IndividualHeader_ID=" + header_id + "";
                        string user_update, date_update;
                        SqlCommand sql_update_individual_header = new SqlCommand(update_individual_header, conn);

                        user_update = Session["user_name"].ToString();
                        date_update = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff");
                        score = float.Parse(TextBoxRating.Value) * (float.Parse(TextBoxWeight.Value) / 100);

                        sql_update_individual_header.Parameters.AddWithValue("@header_KPI", TextBoxKPI.Value);
                        sql_update_individual_header.Parameters.AddWithValue("@target", -1);
                        sql_update_individual_header.Parameters.AddWithValue("@result", Math.Round(Convert.ToDouble(TextBoxResult.Text),2));
                        sql_update_individual_header.Parameters.AddWithValue("@rating", Math.Round(Convert.ToDouble(TextBoxRating.Value), 2));
                        sql_update_individual_header.Parameters.AddWithValue("@weight", Math.Round(Convert.ToDouble(TextBoxWeight.Value), 2));
                        sql_update_individual_header.Parameters.AddWithValue("@score", score);
                        sql_update_individual_header.Parameters.AddWithValue("@user_update", user_update);
                        sql_update_individual_header.Parameters.AddWithValue("@date_update", date_update);
                        sql_update_individual_header.Parameters.AddWithValue("@objective", TextareaObjective.InnerText);
                        sql_update_individual_header.Parameters.AddWithValue("@period_id", period_id);
                        sql_update_individual_header.Parameters.AddWithValue("@formula", "-");
                        sql_update_individual_header.Parameters.AddWithValue("@measure", "-");
                        sql_update_individual_header.Parameters.AddWithValue("@data_status", "exist");
                        sql_update_individual_header.Parameters.AddWithValue("@user_id", user_id);
                        sql_update_individual_header.ExecuteNonQuery();
                        ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "redirect", "alert('KPI Updated!'); window.location='" + "view_submit_individual.aspx?page=" + page + "&period_id=" + period_id + "&emp_nik=" + emp_nik + "&prev_page=" + prev_page + "';", true);
                    }
                }
                conn.Close();
            }//end of SqlConnection
        }

        public string ShowMonthNameTarget(int target_value)
        {
            string month_name = "";
            switch (target_value)
            {
                case 1:
                    month_name = "January"; break;
                case 2:
                    month_name = "February"; break;
                case 3:
                    month_name = "March"; break;
                case 4:
                    month_name = "April"; break;
                case 5:
                    month_name = "May"; break;
                case 6:
                    month_name = "June"; break;
                case 7:
                    month_name = "July"; break;
                case 8:
                    month_name = "August"; break;
                case 9:
                    month_name = "September"; break;
                case 10:
                    month_name = "October"; break;
                case 11:
                    month_name = "November"; break;
                case 12:
                    month_name = "December"; break;
            }
            return month_name;
        }

        public string ShowMonthNameResult(int result_value)
        {
            string month_name = "";
            switch (result_value)
            {
                case 0:
                    month_name = "-"; break;
                case 1:
                    month_name = "January"; break;
                case 2:
                    month_name = "February"; break;
                case 3:
                    month_name = "March"; break;
                case 4:
                    month_name = "April"; break;
                case 5:
                    month_name = "May"; break;
                case 6:
                    month_name = "June"; break;
                case 7:
                    month_name = "July"; break;
                case 8:
                    month_name = "August"; break;
                case 9:
                    month_name = "September"; break;
                case 10:
                    month_name = "October"; break;
                case 11:
                    month_name = "November"; break;
                case 12:
                    month_name = "December"; break;
            }
            return month_name;
        }
    }
}